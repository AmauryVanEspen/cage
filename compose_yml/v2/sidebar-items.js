initSidebarItems({"enum":[["CommandLine","A command line to be executed by Docker."],["Context","Either a local directory path, or a Git-format \"URL\" (not necessarily a real URL, alas)."],["HostVolume","Where can we find the volume we want to map into a container?"],["IpcMode","What IPC namespace should we use for our container?"],["NetworkMode","How should we configure the container's networking?"],["PidMode","What process ID namespace should we use?"],["Ports","Either a port, or a range of ports."],["RestartMode","What should Docker do when the container stops running?"],["ServiceOrContainer","The name of either a service or a container."],["VolumePermissions","Permissions on volumes that are mapped into the Docker container."]],"fn":[["escape","Escape a string and convert it into a `RawOr<T>` value.  See `RawOr<T>` for examples of how to use this API."],["raw","Convert a raw string containing variable interpolations into a `RawOr<T>` value.  See `RawOr<T>` for examples of how to use this API."],["value","Convert a value into a `RawOr<T>` value, taking ownership of the original value.  See `RawOr<T>` for examples of how to use this API."]],"struct":[["AliasedName","The name of an external resource, and an optional local alias to which it is mapped inside a container."],["Build","Information on how to build a Docker image."],["DevicePermissions","Permissions on devices that are mapped into the Docker container."],["Extends","Specify another service which should be used as the base for this service."],["ExternalNetwork","Information about an external network."],["File","A `docker-compose.yml` file."],["GitUrl","URL of a Git repository.  Git repositories may be specified as either ordinary `http` or `https` URLs, or as `scp`-style remote directory specifiers."],["HostMapping","A host mapping to add to `/etc/hosts`."],["Image","The name of an external resource, and an optional local alias to which it is mapped inside a container.  Our fields names are based on the `docker` documentation."],["Logging","Logging configuration."],["MemorySize","The size of a block of memory. This can be serialized as a Docker-compatible size string using specifiers like `k`, `m` and `g`."],["Network","A service which will be managed by `docker-compose`."],["NetworkInterface","A connection from a `Service` to a `Network`."],["OsEnvironment","Fetches environment variables from `std::env`."],["PortMapping","Specify how to map container ports to the host."],["RawOr","Either an unparsed interpolation string, or a fully-parsed value.  We use this representation because:"],["RegistryHost","A server running a Docker registry."],["Service","A service which will be managed by `docker-compose`."],["VolumeMount","A volume associated with a service."],["VolumesFrom","Mount the volumes defined by another container into this one."]],"trait":[["Environment","A source of environment variable values."],["InterpolateAll","Support for environment variable interpolation."],["MergeOverride","This trait is implemented by types that can be merged"]]});